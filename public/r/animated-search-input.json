{
  "name": "animated-search-input",
  "title": "Animated Search Input",
  "description": "A animated seach input component",
  "type": "registry:ui",
  "files": [
    {
      "path": "registry/components/ui/animated-search-input.tsx",
      "type": "registry:ui",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { cn } from \"@/lib/utils\"\nimport { motion, stagger, useAnimate, AnimationSequence } from \"motion/react\"\n\ninterface AnimatedSearchInputProps\n  extends Omit<React.ComponentProps<\"input\">, \"placeholder\"> {\n  placeholders: string[],\n  value: string,\n  setValue: (val: string) => void,\n  haltDuration?: number,\n  enableTabCompletion?: boolean\n}\n\nconst AnimatedSearchInput = React.forwardRef<HTMLInputElement, AnimatedSearchInputProps>(\n  ({ placeholders, haltDuration = 1, enableTabCompletion = true, className, type, value, setValue, onFocus, onBlur, ...props }, ref) => {\n    const [currentIdx, setCurrentIdx] = React.useState(0); // currentIdx of the suggestion which is currently showing\n    const [isFocused, setIsFocused] = React.useState(false);\n\n    const handleKeydown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n      if (enableTabCompletion && isFocused && e.key === \"Tab\") {\n        setValue(placeholders[currentIdx]);\n      }\n    }\n\n    const handleFocus = (e: React.FocusEvent<HTMLInputElement>) => {\n      setIsFocused(true);\n      onFocus?.(e);\n    }\n\n    const handleBlur = (e: React.FocusEvent<HTMLInputElement>) => {\n      setIsFocused(false);\n      onBlur?.(e);\n    }\n\n    return (\n      <div className=\"mx-4 my-2 relative\">\n        <input\n          ref={ref}\n          type={type}\n          value={value}\n          onFocus={handleFocus}\n          onBlur={handleBlur}\n          onKeyDown={handleKeydown}\n          className={cn(\n            \"h-10 w-full min-w-[25rem] border-2 border-neutral-200 dark:border-neutral-700 rounded-full px-6 py-2 text-sm shadow-xl/10 dark:shadow-lg dark:shadow-white focus-visible:outline-none disabled:opacity-50\",\n            \"bg-gradient-to-r from-neutral-50 to-neutral-100\",\n            \"dark:from-neutral-800 dark:to-neutral-900\",\n            className\n          )}\n          {...props}\n        />\n        <div className=\"h-full w-full py-1 flex px-6 items-center absolute inset-0 pointer-events-none select-none\">\n          {\n            (value === undefined || value === null || value === \"\") && placeholders[currentIdx] && (\n              <AnimatedPlaceholder text={placeholders[currentIdx]} haltDuration={haltDuration} increasecurrentIdx={() => setCurrentIdx(prevcurrentIdx => (prevcurrentIdx + 1) % placeholders.length)} key={currentIdx} />\n            )\n          }\n        </div>\n      </div>\n    )\n  }\n)\n\nAnimatedSearchInput.displayName = \"AnimatedSearchInput\"\n\nconst AnimatedPlaceholder = ({ text, increasecurrentIdx, haltDuration }: { text: string, increasecurrentIdx: () => void, haltDuration: number }) => {\n  const [scope, animate] = useAnimate();\n\n  React.useEffect(() => {\n    const startAnimation = async () => {\n      const sequence: AnimationSequence = [\n        [\"span\", { y: 0, opacity: 1, filter: \"blur(0px)\" }, { duration: 0.3, type: \"tween\", delay: stagger(0.05) }],\n        [\"span\", {}, { at: `+${haltDuration}` }], // delay between two placeholders\n        [\"span\", { y: -20, opacity: 0, filter: \"blur(10px)\" }, { duration: 0.3, type: \"tween\", delay: stagger(0.05) }]\n      ]\n\n      await animate(sequence);\n\n      increasecurrentIdx(); // to initialize the animation for the next suggestion\n    }\n\n    startAnimation();\n  }, [animate, haltDuration, increasecurrentIdx])\n\n  return (\n    <div ref={scope} className=\"text-nowrap overflow-hidden\">\n      {\n        text.split(\"\").map((t, i) => (\n          <motion.span\n            initial={{\n              y: 20,\n              opacity: 0,\n              filter: \"blur(10px)\"\n            }}\n            className=\"inline-block whitespace-pre-wrap text-sm text-muted-foreground pointer-events-none select-none\"\n            aria-hidden={true}\n            key={`${t}-${i}`}\n          >\n            {t}\n          </motion.span>\n        ))\n      }\n    </div>\n  )\n}\n\nexport { AnimatedSearchInput }\n"
    }
  ],
  "dependencies": [
    "motion"
  ]
}