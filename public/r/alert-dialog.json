{
  "name": "alert-dialog",
  "title": "Alert Dialog",
  "description": "A Alert Dialog Component",
  "type": "registry:ui",
  "files": [
    {
      "path": "registry/components/ui/alert-dialog.tsx",
      "type": "registry:ui",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"./button\"\nimport { AnimatePresence, motion } from \"motion/react\"\n\nconst AlertDialogStateContext = React.createContext<boolean | undefined>(undefined);\n\nconst AlertDialog = ({ ...props }: React.ComponentProps<typeof AlertDialogPrimitive.Root>) => {\n  const [isOpen, setIsOpen] = React.useState(false);\n\n  return (\n    <AlertDialogStateContext.Provider value={isOpen}>\n      <AlertDialogPrimitive.Root\n        open={isOpen}\n        onOpenChange={setIsOpen}\n        data-slot=\"alert-dialog\"\n        {...props}\n      />\n    </AlertDialogStateContext.Provider>\n  )\n}\n\nconst AlertDialogTrigger = ({ ...props }: React.ComponentProps<typeof AlertDialogPrimitive.Trigger>) => (\n  <AlertDialogPrimitive.Trigger\n    data-slot=\"alert-dialog-trigger\"\n    {...props}\n  />\n)\n\nconst AlertDialogPortal = ({ ...props }: React.ComponentProps<typeof AlertDialogPrimitive.Portal>) => (\n  <AlertDialogPrimitive.Portal\n    data-slot=\"alert-dialog-portal\"\n    {...props}\n  />\n)\n\nconst AlertDialogOverlay = ({ className, ...props }: React.ComponentProps<typeof AlertDialogPrimitive.Overlay>) => {\n  const isOpen = React.useContext(AlertDialogStateContext);\n\n  return (\n    <AnimatePresence>\n      {\n        isOpen && (\n          <motion.div\n            initial={{\n              opacity: 0\n            }}\n            animate={{\n              opacity: 1\n            }}\n            exit={{\n              opacity: 0\n            }}\n            transition={{\n              duration: 0.3\n            }}\n\n            className={cn(\n              \"fixed inset-0 bg-black/50\",\n              className\n            )}\n          >\n            <AlertDialogPrimitive.Overlay\n              data-slot=\"alert-dialog-overlay\"\n              className={cn(\n                \"fixed inset-0 z-50 bg-black/50\",\n                className\n              )}\n              {...props}\n            />\n          </motion.div>\n        )\n      }\n    </AnimatePresence>\n  )\n}\n\nconst AlertDialogContent = ({ className, ...props }: React.ComponentProps<typeof AlertDialogPrimitive.Content>) => {\n  const isOpen = React.useContext(AlertDialogStateContext);\n\n  return (\n    <AlertDialogPortal forceMount>\n      <AlertDialogOverlay />\n      <AnimatePresence initial={false}>\n        {\n          isOpen && (\n            <motion.div\n              initial={{\n                opacity: 0,\n                scale: 0.97,\n                x: 30,\n                y: -30,\n                filter: \"blur(10px)\"\n              }}\n              animate={{\n                opacity: 1,\n                scale: 1,\n                x: 0,\n                y: 0,\n                filter: \"blur(0px)\"\n              }}\n              exit={{\n                opacity: 0,\n                scale: 0.95,\n                x: 30,\n                y: -30,\n                filter: \"blur(10px)\"\n              }}\n              transition={{\n                duration: 0.25,\n              }}\n              className=\"fixed z-50 top-1/2 left-1/2 -translate-1/2 inset-0 h-screen w-screen flex justify-center items-center\"\n            >\n              <AlertDialogPrimitive.Content\n                data-slot=\"alert-dialog-content\"\n                {...props}\n                className={cn(\n                  \"bg-neutral-50 dark:bg-neutral-900 relative z-50 flex flex-col w-full md:max-w-[30rem] max-w-[calc(100vw-2em)] gap-4 rounded-md border border-border p-6 shadow-lg\",\n                  className\n                )}\n              />\n            </motion.div>\n          )\n        }\n      </AnimatePresence>\n    </AlertDialogPortal >\n  )\n}\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center md:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"mt-4 flex flex-col-reverse md:flex-row md:justify-end gap-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Title>) => (\n  <AlertDialogPrimitive.Title\n    data-slot=\"alert-dialog-title\"\n    className={cn(\"text-xl font-semibold\", className)}\n    {...props}\n  />\n)\n\nconst AlertDialogDescription = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Description>) => (\n  <AlertDialogPrimitive.Description\n    data-slot=\"alert-dialog-description\"\n    className={cn(\"text-muted-foreground text-sm\", className)}\n    {...props}\n  />\n)\n\nconst AlertDialogAction = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Action>) => (\n  <AlertDialogPrimitive.Action\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n)\n\nconst AlertDialogCancel = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Cancel>) => (\n  <AlertDialogPrimitive.Cancel\n    className={cn(buttonVariants({ variant: \"outline\" }), className)}\n    {...props}\n  />\n)\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n"
    }
  ],
  "dependencies": [
    "@radix-ui/react-alert-dialog",
    "motion"
  ],
  "registryDependencies": [
    "button"
  ]
}