{
  "name": "accordion",
  "title": "Accordion",
  "description": "A accordion component",
  "type": "registry:ui",
  "files": [
    {
      "path": "registry/components/ui/accordion.tsx",
      "type": "registry:ui",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { cn } from \"@/lib/utils\";\nimport { IconChevronDown } from \"@tabler/icons-react\"\nimport { AnimatePresence, motion } from \"motion/react\"\n\nconst Accordion = AccordionPrimitive.Root;\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(\n  ({ className, ...props }, ref) => (\n    <AccordionPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"divide-y divide-border\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(\n  ({ children, className, ...props }, ref) => {\n    return (\n      <AccordionPrimitive.Header className=\"mt-0\">\n        <AccordionPrimitive.Trigger\n          ref={ref}\n          className={cn(\n            \"flex w-full justify-between p-2 group cursor-pointer\",\n            className\n          )}\n          {...props}\n        >\n          <span className=\"group-hover:ml-2 text-left transition-all duration-200 text-base font-medium\">{children}</span>\n          <IconChevronDown size={18} aria-hidden={true} className=\"text-muted-foreground shrink-0 transition-transform duration-200 group-data-[state=open]:rotate-180\" />\n        </AccordionPrimitive.Trigger>\n      </AccordionPrimitive.Header>\n    )\n  }\n)\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\ntype AccordionContentProps = React.ComponentPropsWithoutRef<\n  typeof AccordionPrimitive.Content\n> & {\n  animationDuration?: number\n}\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  AccordionContentProps\n>(\n  ({ className, children, animationDuration = 0.3, ...props }, ref) => {\n    const [isOpen, setIsOpen] = React.useState(false);\n    const contentRef = React.useRef<null | HTMLDivElement>(null);\n\n    React.useEffect(() => {\n      const node = contentRef.current;\n      if (!node) return;\n\n      // To observe the change in the state of the content\n      const observer = new MutationObserver(() => {\n        const newState = node.getAttribute(\"data-state\");\n        setIsOpen(newState === \"open\");\n      });\n\n      observer.observe(node, { attributes: true, attributeFilter: [\"data-state\"] });\n\n      return () => observer.disconnect();\n    }, []);\n\n    return (\n      <AccordionPrimitive.Content\n        forceMount\n        ref={contentRef}\n        {...props}\n        className=\"overflow-hidden transition-all duration-200\"\n      >\n        <AnimatePresence initial={false}>\n          {\n            isOpen && (\n              <motion.div\n                initial={{\n                  height: 0,\n                  opacity: 0,\n                  filter: \"blur(10px)\",\n                  scale: 0.95\n                }}\n                animate={{\n                  height: \"auto\",\n                  opacity: 1,\n                  filter: \"blur(0px)\",\n                  scale: 1\n                }}\n                exit={{\n                  height: 0,\n                  opacity: 0,\n                  filter: \"blur(10px)\",\n                  scale: 0.95\n                }}\n                transition={{\n                  duration: animationDuration,\n                  ease: \"easeInOut\",\n                  type: \"tween\",\n                }}\n              >\n                <div\n                  ref={ref}\n                  className={cn(\n                    \"px-4 pb-4 text-sm\",\n                    className\n                  )}\n                >\n                  {children}\n                </div>\n              </motion.div>\n            )\n          }\n        </AnimatePresence>\n      </AccordionPrimitive.Content>\n    )\n  }\n)\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionContent, AccordionItem, AccordionTrigger }\n"
    }
  ],
  "dependencies": [
    "@radix-ui/react-accordion",
    "@tabler/icons-react",
    "motion"
  ]
}